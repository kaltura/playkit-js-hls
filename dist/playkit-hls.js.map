{"version":3,"sources":["./hls/webpack/universalModuleDefinition","./hls/playkit-hls.js","./hls/webpack/bootstrap 1466dae4a543795ee808","./hls/external {\"commonjs\":\"playkit-js\",\"commonjs2\":\"playkit-js\",\"amd\":\"playkit-js\",\"root\":[\"playkit\",\"core\"]}","./hls/external {\"commonjs\":\"hls.js\",\"commonjs2\":\"hls.js\",\"amd\":\"hls.js\",\"root\":\"Hls\"}","./hls/./index.js","./hls/./hls-adapter.js","./hls/./default-config.json","./hls/./errors.js","./hls/./jsonp-ploader.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","value","NAME","VERSION","undefined","_playkitJs","_hlsAdapter","_hlsAdapter2","obj","default","isSupported","registerMediaSourceAdapter","_interopRequireDefault","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","writable","setPrototypeOf","__proto__","_get","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","_createClass","defineProperties","target","props","length","descriptor","key","protoProps","staticProps","_hls","_hls2","_defaultConfig","_defaultConfig2","_errors","_jsonpPloader","_jsonpPloader2","HlsAdapter","_BaseMediaSourceAdapt","videoElement","source","config","_logger","debug","version","_this","_triedReloadWithRedirect","_startTime","_config","Utils","mergeDeep","forceRedirectExternalStreams","hlsConfig","_addBindings","adapterConfig","hasPropertyPath","playback","options","html5","hls","sources","redirectExternalStreamsHandler","redirectExternalStreamsTimeout","mimeType","canHlsPlayType","_hlsMimeTypes","includes","toLowerCase","toString","warn","isHlsSupported","_this2","on","Events","ERROR","e","data","_onError","MANIFEST_LOADED","_onManifestLoaded","bind","LEVEL_SWITCHED","_onLevelSwitched","AUDIO_TRACK_SWITCHED","_onAudioTrackSwitched","startTime","_this3","_loadPromise","Promise","resolve","_resolveLoad","_loadInternal","_onLoadedMetadataCallback","_onLoadedMetadata","_videoElement","addEventListener","EventType","LOADED_METADATA","startPosition","_sourceObj","url","loadSource","attachMedia","_trigger","ABR_MODE_CHANGED","mode","isAdaptiveBitrateEnabled","_reset","_removeLoadedMetadataListener","tracks","_playerTracks","removeEventListener","_this4","then","_removeBindings","detachMedia","destroy","audioTracks","_parseAudioTracks","videoTracks","_parseVideoTracks","levels","textTracks","_parseTextTracks","subtitleTracks","concat","hlsAudioTracks","settings","id","active","audioTrack","label","language","lang","index","push","AudioTrack","hlsVideoTracks","startLevel","bandwidth","bitrate","width","height","VideoTrack","hlsTextTracks","kind","type","TextTrack","videoTrack","currentLevel","textTrack","_disableAllTextTracks","_onTrackChanged","nextLevel","autoLevelEnabled","level","nextAutoLevel","nextLoadLevel","details","liveEdge","liveSyncPosition","liveSyncDuration","duration","liveSyncDurationCount","_getLevelDetails","targetduration","currentTime","_getLiveEdge","live","startLoad","_parseTracks","event","find","track","_handleWaitingUponAudioTrackSwitch","_this5","Env","browser","timeUpdateListener","PLAYING","TIME_UPDATE","vidTextTracks","errorType","errorDetails","fatal","error","ErrorTypes","NETWORK_ERROR","ErrorDetails","MANIFEST_LOAD_ERROR","MANIFEST_LOAD_TIMEOUT","Error","Severity","CRITICAL","Category","NETWORK","Code","HTTP_ERROR","_reloadWithDirectManifest","MEDIA_ERROR","_handleMediaError","RECOVERABLE","MEDIA","HLS_FATAL_MEDIA_ERROR","PLAYER","severity","_ref","HlsJsErrorMap","category","code","now","performance","recover","_checkTimeDeltaHasPassed","_recoverDecodingErrorDate","recoverDecodingErrorDelay","_recoverDecodingError","_recoverSwapAudioCodecDate","recoverSwapAudioCodecDelay","_recoverSwapAudioCodec","delay","recoverMediaError","swapAudioCodec","off","isLive","fragments","fragLength","start","end","maxLatency","liveMaxLatencyDuration","liveMaxLatencyDurationCount","Math","max","maxFragLookUpTolerance","BaseMediaSourceAdapter","getLogger","fragLoadingMaxRetry","maxMaxBufferLength","_defineProperty","_HlsJsErrorMap","MANIFEST","TIMEOUT","MANIFEST_PARSING_ERROR","HLSJS_CANNOT_PARSE","LEVEL_LOAD_ERROR","LEVEL_LOAD_TIMEOUT","LEVEL_SWITCH_ERROR","BITRATE_SWITCH_ISSUE","FRAG_LOAD_ERROR","FRAG_LOOP_LOADING_ERROR","FRAG_LOAD_TIMEOUT","FRAG_PARSING_ERROR","HLS_FRAG_PARSING_ERROR","BUFFER_APPEND_ERROR","HLS_BUFFER_APPEND_ISSUE","BUFFER_APPENDING_ERROR","HLS_BUFFER_APPENDING_ISSUE","BUFFER_STALLED_ERROR","HLS_BUFFER_STALLED_ERROR","pLoader","_Hlsjs$DefaultConfig$","loadOrig","load","callback","context","callbacks","Http","jsonp","timeout","uri","catch","DefaultConfig","loader"],"mappings":"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","file":"playkit-hls.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"playkit-js\"), require(\"hls.js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"playkit-js\", \"hls.js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hls\"] = factory(require(\"playkit-js\"), require(\"hls.js\"));\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"hls\"] = factory(root[\"playkit\"][\"core\"], root[\"Hls\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"playkit-js\"), require(\"hls.js\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"playkit-js\", \"hls.js\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hls\"] = factory(require(\"playkit-js\"), require(\"hls.js\"));\n\telse\n\t\troot[\"playkit\"] = root[\"playkit\"] || {}, root[\"playkit\"][\"hls\"] = factory(root[\"playkit\"][\"core\"], root[\"Hls\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NAME = exports.VERSION = undefined;\n\nvar _playkitJs = __webpack_require__(0);\n\nvar _hlsAdapter = __webpack_require__(3);\n\nvar _hlsAdapter2 = _interopRequireDefault(_hlsAdapter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _hlsAdapter2.default;\nexports.VERSION = \"1.6.0\";\nexports.NAME = \"playkit-js-hls\";\n\n// Register hls adapter to the media source adapter provider.\n\nif (_hlsAdapter2.default.isSupported()) {\n  (0, _playkitJs.registerMediaSourceAdapter)(_hlsAdapter2.default);\n}\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _hls = __webpack_require__(1);\n\nvar _hls2 = _interopRequireDefault(_hls);\n\nvar _defaultConfig = __webpack_require__(4);\n\nvar _defaultConfig2 = _interopRequireDefault(_defaultConfig);\n\nvar _errors = __webpack_require__(5);\n\nvar _playkitJs = __webpack_require__(0);\n\nvar _jsonpPloader = __webpack_require__(6);\n\nvar _jsonpPloader2 = _interopRequireDefault(_jsonpPloader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Adapter of hls.js lib for hls content.\n * @classdesc\n */\nvar HlsAdapter = function (_BaseMediaSourceAdapt) {\n  _inherits(HlsAdapter, _BaseMediaSourceAdapt);\n\n  _createClass(HlsAdapter, null, [{\n    key: 'createAdapter',\n\n\n    /**\n     * Factory method to create media source adapter.\n     * @function createAdapter\n     * @param {HTMLVideoElement} videoElement - The video element that the media source adapter work with.\n     * @param {PKMediaSourceObject} source - The source Object.\n     * @param {Object} config - The player configuration.\n     * @returns {IMediaSourceAdapter} - New instance of the run time media source adapter.\n     * @static\n     */\n\n\n    /**\n     * Reference to _onLoadedMetadata function\n     * @member {?Function} - _onLoadedMetadataCallback\n     * @type {?Function}\n     * @private\n     */\n\n\n    /**\n     * indicate if external redirect was performed\n     * @type {boolean}\n     * @private\n     */\n\n    /**\n     * The hls player instance.\n     * @member {any} _hls\n     * @private\n     */\n\n\n    /**\n     * last recover date from decoding error\n     * @type {number}\n     * @private\n     */\n\n\n    /**\n     * last recover date from audio swap codec operation\n     * @type {number}\n     * @private\n     */\n\n    /**\n     * The adapter logger.\n     * @member {any} _logger\n     * @static\n     * @private\n     */\n    value: function createAdapter(videoElement, source, config) {\n      var adapterConfig = {};\n      if (_playkitJs.Utils.Object.hasPropertyPath(config, 'playback.options.html5.hls')) {\n        adapterConfig.hlsConfig = config.playback.options.html5.hls;\n      }\n      if (_playkitJs.Utils.Object.hasPropertyPath(config, 'sources.options')) {\n        var options = config.sources.options;\n        adapterConfig.forceRedirectExternalStreams = options.forceRedirectExternalStreams;\n        adapterConfig.redirectExternalStreamsHandler = options.redirectExternalStreamsHandler;\n        adapterConfig.redirectExternalStreamsTimeout = options.redirectExternalStreamsTimeout;\n        _jsonpPloader2.default.redirectExternalStreamsHandler = adapterConfig.redirectExternalStreamsHandler;\n        _jsonpPloader2.default.redirectExternalStreamsTimeout = adapterConfig.redirectExternalStreamsTimeout;\n      }\n      return new this(videoElement, source, adapterConfig);\n    }\n\n    /**\n     * Checks if hls adapter can play a given mime type.\n     * @function canPlayType\n     * @param {string} mimeType - The mime type to check.\n     * @returns {boolean} - Whether the hls adapter can play a specific mime type.\n     * @static\n     */\n\n\n    /**\n     * stream start time in seconds\n     * @type {?number}\n     * @private\n     */\n\n\n    /**\n     * The load promise\n     * @member {Promise<Object>} - _loadPromise\n     * @type {Promise<Object>}\n     * @private\n     */\n\n\n    /**\n     * Reference to the player tracks.\n     * @member {Array<Track>} - _playerTracks\n     * @type {Array<Track>}\n     * @private\n     */\n\n    /**\n     * The supported mime types by the hls adapter.\n     * @member {Array<string>} _hlsMimeType\n     * @static\n     * @private\n     */\n\n    /**\n     * The id of the adapter.\n     * @member {string} id\n     * @static\n     * @private\n     */\n\n  }, {\n    key: 'canPlayType',\n    value: function canPlayType(mimeType) {\n      var canHlsPlayType = typeof mimeType === 'string' ? HlsAdapter._hlsMimeTypes.includes(mimeType.toLowerCase()) : false;\n      HlsAdapter._logger.debug('canPlayType result for mimeType:' + mimeType + ' is ' + canHlsPlayType.toString());\n      return canHlsPlayType;\n    }\n\n    /**\n     * Checks if hls adapter can play a given drm data.\n     * For hls.js it always returns false.\n     * @returns {boolean} - Whether the hls adapter can play a specific drm data.\n     * @static\n     */\n\n  }, {\n    key: 'canPlayDrm',\n    value: function canPlayDrm() {\n      HlsAdapter._logger.warn('canPlayDrm result is false');\n      return false;\n    }\n\n    /**\n     * Checks if the hls adapter is supported.\n     * @function isSupported\n     * @returns {boolean} - Whether hls is supported.\n     * @static\n     */\n\n  }, {\n    key: 'isSupported',\n    value: function isSupported() {\n      var isHlsSupported = _hls2.default.isSupported();\n      HlsAdapter._logger.debug('isSupported:' + isHlsSupported);\n      return isHlsSupported;\n    }\n\n    /**\n     * @constructor\n     * @param {HTMLVideoElement} videoElement - The video element which will bind to the hls adapter\n     * @param {PKMediaSourceObject} source - The source object\n     * @param {Object} config - The media source adapter configuration\n     */\n\n  }]);\n\n  function HlsAdapter(videoElement, source, config) {\n    _classCallCheck(this, HlsAdapter);\n\n    HlsAdapter._logger.debug('Creating adapter. Hls version: ' + _hls2.default.version);\n\n    var _this = _possibleConstructorReturn(this, (HlsAdapter.__proto__ || Object.getPrototypeOf(HlsAdapter)).call(this, videoElement, source, config));\n\n    _this._triedReloadWithRedirect = false;\n    _this._startTime = 0;\n\n    _this._config = _playkitJs.Utils.Object.mergeDeep({}, _this._config, _defaultConfig2.default);\n    if (_this._config.forceRedirectExternalStreams) {\n      _this._config.hlsConfig['pLoader'] = _jsonpPloader2.default;\n    }\n    _this._hls = new _hls2.default(_this._config.hlsConfig);\n    _this._addBindings();\n    return _this;\n  }\n\n  /**\n   * Adds the required bindings with hls.js.\n   * @function _addBindings\n   * @private\n   * @returns {void}\n   */\n\n\n  _createClass(HlsAdapter, [{\n    key: '_addBindings',\n    value: function _addBindings() {\n      var _this2 = this;\n\n      this._hls.on(_hls2.default.Events.ERROR, function (e, data) {\n        return _this2._onError(data);\n      });\n      this._hls.on(_hls2.default.Events.MANIFEST_LOADED, this._onManifestLoaded.bind(this));\n      this._hls.on(_hls2.default.Events.LEVEL_SWITCHED, this._onLevelSwitched.bind(this));\n      this._hls.on(_hls2.default.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched.bind(this));\n    }\n\n    /**\n     * Load the video source\n     * @function load\n     * @param {number} startTime - Optional time to start the video from.\n     * @returns {Promise<Object>} - The loaded data\n     * @override\n     */\n\n  }, {\n    key: 'load',\n    value: function load(startTime) {\n      var _this3 = this;\n\n      if (!this._loadPromise) {\n        this._startTime = startTime;\n        this._loadPromise = new Promise(function (resolve) {\n          _this3._resolveLoad = resolve;\n          _this3._loadInternal();\n        });\n      }\n      return this._loadPromise;\n    }\n\n    /**\n     * Load the video source\n     * @function load\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_loadInternal',\n    value: function _loadInternal() {\n      this._onLoadedMetadataCallback = this._onLoadedMetadata.bind(this);\n      this._videoElement.addEventListener(_playkitJs.EventType.LOADED_METADATA, this._onLoadedMetadataCallback);\n      if (this._startTime) {\n        this._hls.startPosition = this._startTime;\n      }\n      if (this._sourceObj && this._sourceObj.url) {\n        this._hls.loadSource(this._sourceObj.url);\n        this._hls.attachMedia(this._videoElement);\n        this._trigger(_playkitJs.EventType.ABR_MODE_CHANGED, { mode: this.isAdaptiveBitrateEnabled() ? 'auto' : 'manual' });\n      }\n    }\n\n    /**\n     * Load the video source with installed playlist loader\n     * @function _reloadWithDirectManifest\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_reloadWithDirectManifest',\n    value: function _reloadWithDirectManifest() {\n      // Mark that we tried once to redirect\n      this._triedReloadWithRedirect = true;\n      // reset hls.js\n      this._reset();\n      // re-init hls.js with the external redirect playlist loader\n      this._config.hlsConfig['pLoader'] = _jsonpPloader2.default;\n      this._hls = new _hls2.default(this._config.hlsConfig);\n      this._addBindings();\n      this._loadInternal();\n    }\n\n    /**\n     * Loaded metadata event handler.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onLoadedMetadata',\n    value: function _onLoadedMetadata() {\n      this._removeLoadedMetadataListener();\n      this._resolveLoad({ tracks: this._playerTracks });\n    }\n\n    /**\n     * Remove the loadedmetadata listener\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_removeLoadedMetadataListener',\n    value: function _removeLoadedMetadataListener() {\n      if (this._onLoadedMetadataCallback) {\n        this._videoElement.removeEventListener(_playkitJs.EventType.LOADED_METADATA, this._onLoadedMetadataCallback);\n        this._onLoadedMetadataCallback = null;\n      }\n    }\n\n    /**\n     * Destroys the hls adapter.\n     * @function destroy\n     * @override\n     * @returns {Promise<*>} - The destroy promise.\n     */\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      var _this4 = this;\n\n      return _get(HlsAdapter.prototype.__proto__ || Object.getPrototypeOf(HlsAdapter.prototype), 'destroy', this).call(this).then(function () {\n        HlsAdapter._logger.debug('destroy');\n        _this4._loadPromise = null;\n        _this4._playerTracks = [];\n        _this4._reset();\n      });\n    }\n\n    /**\n     * reset hls.js instance and its bindings\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_reset',\n    value: function _reset() {\n      this._removeBindings();\n      this._hls.detachMedia();\n      this._hls.destroy();\n    }\n\n    /**\n     * Parse the hls tracks into player tracks.\n     * @returns {Array<Track>} - The parsed tracks.\n     * @private\n     */\n\n  }, {\n    key: '_parseTracks',\n    value: function _parseTracks() {\n      var audioTracks = this._parseAudioTracks(this._hls.audioTracks || []);\n      var videoTracks = this._parseVideoTracks(this._hls.levels || []);\n      var textTracks = this._parseTextTracks(this._hls.subtitleTracks || []);\n      return audioTracks.concat(videoTracks).concat(textTracks);\n    }\n\n    /**\n     * Parse hls audio tracks into player audio tracks.\n     * @param {Array<Object>} hlsAudioTracks - The hls audio tracks.\n     * @returns {Array<AudioTrack>} - The parsed audio tracks.\n     * @private\n     */\n\n  }, {\n    key: '_parseAudioTracks',\n    value: function _parseAudioTracks(hlsAudioTracks) {\n      var audioTracks = [];\n      for (var i = 0; i < hlsAudioTracks.length; i++) {\n        // Create audio tracks\n        var settings = {\n          id: hlsAudioTracks[i].id,\n          active: this._hls.audioTrack === hlsAudioTracks[i].id,\n          label: hlsAudioTracks[i].name,\n          language: hlsAudioTracks[i].lang,\n          index: i\n        };\n        audioTracks.push(new _playkitJs.AudioTrack(settings));\n      }\n      return audioTracks;\n    }\n\n    /**\n     * Parse hls video tracks into player video tracks.\n     * @param {Array<Object>} hlsVideoTracks - The hls video tracks.\n     * @returns {Array<VideoTrack>} - The parsed video tracks.\n     * @private\n     */\n\n  }, {\n    key: '_parseVideoTracks',\n    value: function _parseVideoTracks(hlsVideoTracks) {\n      var videoTracks = [];\n      for (var i = 0; i < hlsVideoTracks.length; i++) {\n        // Create video tracks\n        var settings = {\n          active: this._hls.startLevel === i,\n          bandwidth: hlsVideoTracks[i].bitrate,\n          width: hlsVideoTracks[i].width,\n          height: hlsVideoTracks[i].height,\n          language: '',\n          index: i\n        };\n        videoTracks.push(new _playkitJs.VideoTrack(settings));\n      }\n      return videoTracks;\n    }\n\n    /**\n     * Parse hls text tracks into player text tracks.\n     * @param {Array<Object>} hlsTextTracks - The hls text tracks.\n     * @returns {Array<TextTrack>} - The parsed text tracks.\n     * @private\n     */\n\n  }, {\n    key: '_parseTextTracks',\n    value: function _parseTextTracks(hlsTextTracks) {\n      var textTracks = [];\n      for (var i = 0; i < hlsTextTracks.length; i++) {\n        // Create text tracks\n        var settings = {\n          id: hlsTextTracks[i].id,\n          active: hlsTextTracks[i].default,\n          label: hlsTextTracks[i].name,\n          kind: hlsTextTracks[i].type.toLowerCase(),\n          language: hlsTextTracks[i].lang,\n          index: i\n        };\n        textTracks.push(new _playkitJs.TextTrack(settings));\n      }\n      return textTracks;\n    }\n\n    /**\n     * Select an audio track.\n     * @function selectAudioTrack\n     * @param {AudioTrack} audioTrack - the audio track to select.\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'selectAudioTrack',\n    value: function selectAudioTrack(audioTrack) {\n      if (audioTrack instanceof _playkitJs.AudioTrack && !audioTrack.active && this._hls.audioTracks) {\n        this._hls.audioTrack = audioTrack.id;\n      }\n    }\n\n    /**\n     * Select a video track.\n     * @function selectVideoTrack\n     * @param {VideoTrack} videoTrack - the track to select.\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'selectVideoTrack',\n    value: function selectVideoTrack(videoTrack) {\n      if (videoTrack instanceof _playkitJs.VideoTrack && (!videoTrack.active || this.isAdaptiveBitrateEnabled()) && this._hls.levels) {\n        if (this.isAdaptiveBitrateEnabled()) {\n          this._trigger(_playkitJs.EventType.ABR_MODE_CHANGED, { mode: 'manual' });\n        }\n        this._hls.currentLevel = videoTrack.index;\n      }\n    }\n\n    /**\n     * Select a text track.\n     * @function selectTextTrack\n     * @param {TextTrack} textTrack - the track to select.\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'selectTextTrack',\n    value: function selectTextTrack(textTrack) {\n      if (textTrack instanceof _playkitJs.TextTrack && !textTrack.active && this._videoElement.textTracks) {\n        this._disableAllTextTracks();\n        this._videoElement.textTracks[textTrack.index].mode = 'hidden';\n        HlsAdapter._logger.debug('Text track changed', textTrack);\n        this._onTrackChanged(textTrack);\n      }\n    }\n\n    /** Hide the text track\n     * @function hideTextTrack\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'hideTextTrack',\n    value: function hideTextTrack() {\n      this._disableAllTextTracks();\n    }\n\n    /**\n     * Enables adaptive bitrate switching according to hls.js logic.\n     * @function enableAdaptiveBitrate\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'enableAdaptiveBitrate',\n    value: function enableAdaptiveBitrate() {\n      if (!this.isAdaptiveBitrateEnabled()) {\n        this._trigger(_playkitJs.EventType.ABR_MODE_CHANGED, { mode: 'auto' });\n        this._hls.nextLevel = -1;\n      }\n    }\n\n    /**\n     * Checking if adaptive bitrate switching is enabled.\n     * @function isAdaptiveBitrateEnabled\n     * @returns {boolean} - Whether adaptive bitrate is enabled.\n     * @public\n     */\n\n  }, {\n    key: 'isAdaptiveBitrateEnabled',\n    value: function isAdaptiveBitrateEnabled() {\n      return this._hls.autoLevelEnabled;\n    }\n\n    /**\n     * Returns the details of hls level\n     * @function _getLevelDetails\n     * @returns {Object} - Level details\n     * @private\n     */\n\n  }, {\n    key: '_getLevelDetails',\n    value: function _getLevelDetails() {\n      var level = this._hls.levels[this._hls.currentLevel] || this._hls.levels[this._hls.nextLevel] || this._hls.levels[this._hls.nextAutoLevel] || this._hls.levels[this._hls.nextLoadLevel];\n      return level && level.details ? level.details : {};\n    }\n\n    /**\n     * Returns the live edge\n     * @returns {number} - live edge\n     * @private\n     */\n\n  }, {\n    key: '_getLiveEdge',\n    value: function _getLiveEdge() {\n      try {\n        var liveEdge = void 0;\n        if (this._hls.liveSyncPosition) {\n          liveEdge = this._hls.liveSyncPosition;\n        } else if (this._hls.config.liveSyncDuration) {\n          liveEdge = this._videoElement.duration - this._hls.config.liveSyncDuration;\n        } else {\n          liveEdge = this._videoElement.duration - this._hls.config.liveSyncDurationCount * this._getLevelDetails().targetduration;\n        }\n        return liveEdge > 0 ? liveEdge : this._videoElement.duration;\n      } catch (e) {\n        HlsAdapter._logger.debug('Live edge calculation failed, fall back to duration');\n        return this._videoElement.duration;\n      }\n    }\n\n    /**\n     * Seeking to live edge, calculated according hls configuration - liveSyncDuration or liveSyncDurationCount.\n     * @function seekToLiveEdge\n     * @returns {void}\n     * @public\n     */\n\n  }, {\n    key: 'seekToLiveEdge',\n    value: function seekToLiveEdge() {\n      try {\n        this._videoElement.currentTime = this._getLiveEdge();\n      } catch (e) {\n        return;\n      }\n    }\n\n    /**\n     * Checking if the current playback is live.\n     * @function isLive\n     * @returns {boolean} - Whether playback is live.\n     * @public\n     */\n\n  }, {\n    key: 'isLive',\n    value: function isLive() {\n      try {\n        return !!this._getLevelDetails().live;\n      } catch (e) {\n        return false;\n      }\n    }\n\n    /**\n     * Fired after manifest has been loaded.\n     * @function _onManifestLoaded\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onManifestLoaded',\n    value: function _onManifestLoaded() {\n      HlsAdapter._logger.debug('The source has been loaded successfully');\n      this._hls.startLoad();\n      this._playerTracks = this._parseTracks();\n    }\n\n    /**\n     * Triggers on video track selection (auto or manually) the 'videotrackchanged' event forward.\n     * @function _onLevelSwitched\n     * @param {string} event - The event name.\n     * @param {any} data - The event data object.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onLevelSwitched',\n    value: function _onLevelSwitched(event, data) {\n      var videoTrack = this._playerTracks.find(function (track) {\n        return track instanceof _playkitJs.VideoTrack && track.index === data.level;\n      });\n      HlsAdapter._logger.debug('Video track changed', videoTrack);\n      this._onTrackChanged(videoTrack);\n    }\n\n    /**\n     * Triggers on audio track selection (auto or manually) the 'audiotrackchanged' event forward.\n     * @function _onAudioTrackSwitched\n     * @param {string} event - The event name.\n     * @param {any} data - The event data object.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onAudioTrackSwitched',\n    value: function _onAudioTrackSwitched(event, data) {\n      var audioTrack = this._playerTracks.find(function (track) {\n        return track instanceof _playkitJs.AudioTrack && track.id === data.id;\n      });\n      HlsAdapter._logger.debug('Audio track changed', audioTrack);\n      this._onTrackChanged(audioTrack);\n      this._handleWaitingUponAudioTrackSwitch();\n    }\n\n    /**\n     * Trigger a playing event whenever an audio track is changed & time_update event is fired.\n     * This align Edge and IE behaviour to other browsers. When an audio track changed in IE & Edge, they trigger\n     * waiting event but not playing event.\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_handleWaitingUponAudioTrackSwitch',\n    value: function _handleWaitingUponAudioTrackSwitch() {\n      var _this5 = this;\n\n      var affectedBrowsers = ['IE', 'Edge'];\n      if (affectedBrowsers.includes(_playkitJs.Env.browser.name)) {\n        var timeUpdateListener = function timeUpdateListener() {\n          _this5._trigger(_playkitJs.EventType.PLAYING);\n          _this5._videoElement.removeEventListener(_playkitJs.EventType.TIME_UPDATE, timeUpdateListener);\n        };\n        this._videoElement.addEventListener(_playkitJs.EventType.TIME_UPDATE, timeUpdateListener);\n      }\n    }\n\n    /**\n     * Disables all the video tag text tracks.\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_disableAllTextTracks',\n    value: function _disableAllTextTracks() {\n      var vidTextTracks = this._videoElement.textTracks;\n      for (var i = 0; i < vidTextTracks.length; i++) {\n        vidTextTracks[i].mode = 'disabled';\n      }\n    }\n\n    /**\n     * Handles hls errors.\n     * @param {any} data - The event data object.\n     * @private\n     * @returns {void}\n     */\n\n  }, {\n    key: '_onError',\n    value: function _onError(data) {\n      var errorType = data.type;\n      var errorDetails = data.details;\n      var errorFatal = data.fatal;\n      if (errorFatal) {\n        var error = void 0;\n        switch (errorType) {\n          case _hls2.default.ErrorTypes.NETWORK_ERROR:\n            if ([_hls2.default.ErrorDetails.MANIFEST_LOAD_ERROR, _hls2.default.ErrorDetails.MANIFEST_LOAD_TIMEOUT].includes(errorDetails) && !this._triedReloadWithRedirect && !this._config.forceRedirectExternalStreams) {\n              this._reloadWithDirectManifest();\n            } else {\n              error = new _playkitJs.Error(_playkitJs.Error.Severity.CRITICAL, _playkitJs.Error.Category.NETWORK, _playkitJs.Error.Code.HTTP_ERROR, errorDetails);\n            }\n            break;\n          case _hls2.default.ErrorTypes.MEDIA_ERROR:\n            if (this._handleMediaError()) {\n              error = new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, _playkitJs.Error.Category.MEDIA, _playkitJs.Error.Code.HLS_FATAL_MEDIA_ERROR, errorDetails);\n            } else {\n              error = new _playkitJs.Error(_playkitJs.Error.Severity.CRITICAL, _playkitJs.Error.Category.MEDIA, _playkitJs.Error.Code.HLS_FATAL_MEDIA_ERROR, errorDetails);\n            }\n            break;\n          default:\n            error = new _playkitJs.Error(_playkitJs.Error.Severity.CRITICAL, _playkitJs.Error.Category.PLAYER, _playkitJs.Error.Code.HLS_FATAL_MEDIA_ERROR, errorDetails);\n            break;\n        }\n        this._trigger(_playkitJs.EventType.ERROR, error);\n        if (error && error.severity === _playkitJs.Error.Severity.CRITICAL) {\n          this.destroy();\n        }\n      } else {\n        var _ref = _errors.HlsJsErrorMap[errorDetails] || { category: 0, code: 0 },\n            category = _ref.category,\n            code = _ref.code;\n\n        HlsAdapter._logger.warn(new _playkitJs.Error(_playkitJs.Error.Severity.RECOVERABLE, category, code, errorDetails));\n      }\n    }\n\n    /**\n     * Tries to handle media errors via hls.js error handlers\n     * @returns {boolean} - if media error is handled or not\n     * @private\n     */\n\n  }, {\n    key: '_handleMediaError',\n    value: function _handleMediaError() {\n      var now = performance.now();\n      var recover = true;\n      if (this._checkTimeDeltaHasPassed(now, this._recoverDecodingErrorDate, this._config.recoverDecodingErrorDelay)) {\n        this._recoverDecodingError();\n      } else {\n        if (this._checkTimeDeltaHasPassed(now, this._recoverSwapAudioCodecDate, this._config.recoverSwapAudioCodecDelay)) {\n          this._recoverSwapAudioCodec();\n        } else {\n          recover = false;\n          HlsAdapter._logger.error(\"cannot recover, last media error recovery failed\");\n        }\n      }\n      return recover;\n    }\n\n    /**\n     * Check if time ahs passed a certain delta\n     * @param {number} now - current time\n     * @param {number} then - previous time\n     * @param {number} delay - time delta in ms\n     * @returns {boolean} - if time delta has\n     * @private\n     */\n\n  }, {\n    key: '_checkTimeDeltaHasPassed',\n    value: function _checkTimeDeltaHasPassed(now, then, delay) {\n      return !then || now - then > delay;\n    }\n\n    /**\n     * handle recover from decoding error\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_recoverDecodingError',\n    value: function _recoverDecodingError() {\n      this._recoverDecodingErrorDate = performance.now();\n      HlsAdapter._logger.warn(\"try to recover media Error\");\n      this._hls.recoverMediaError();\n    }\n\n    /**\n     * handle recover from decoding error by swaping audio codec\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_recoverSwapAudioCodec',\n    value: function _recoverSwapAudioCodec() {\n      this._recoverSwapAudioCodecDate = performance.now();\n      HlsAdapter._logger.warn(\"try to swap Audio Codec and recover media Error\");\n      this._hls.swapAudioCodec();\n      this._hls.recoverMediaError();\n    }\n\n    /**\n     * Removes hls.js bindings.\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: '_removeBindings',\n    value: function _removeBindings() {\n      this._hls.off(_hls2.default.Events.ERROR, this._onError);\n      this._hls.off(_hls2.default.Events.LEVEL_SWITCHED, this._onLevelSwitched);\n      this._hls.off(_hls2.default.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched);\n      this._removeLoadedMetadataListener();\n    }\n\n    /**\n     * Get the start time of DVR window in live playback in seconds.\n     * @returns {Number} - start time of DVR window.\n     * @public\n     */\n\n  }, {\n    key: 'getStartTimeOfDvrWindow',\n    value: function getStartTimeOfDvrWindow() {\n      if (this.isLive()) {\n        try {\n          var nextLoadLevel = this._hls.levels[this._hls.nextLoadLevel],\n              details = nextLoadLevel.details,\n              fragments = details.fragments,\n              fragLength = fragments.length,\n              start = fragments[0].start + fragments[0].duration,\n              end = fragments[fragLength - 1].start + fragments[fragLength - 1].duration,\n              maxLatency = this._hls.config.liveMaxLatencyDuration !== undefined ? this._hls.config.liveMaxLatencyDuration : this._hls.config.liveMaxLatencyDurationCount * details.targetduration,\n              minPosToSeek = Math.max(start - this._hls.config.maxFragLookUpTolerance, end - maxLatency);\n          return minPosToSeek;\n        } catch (e) {\n          HlsAdapter._logger.debug('Unable obtain the start of DVR window');\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    }\n  }]);\n\n  return HlsAdapter;\n}(_playkitJs.BaseMediaSourceAdapter);\n\nHlsAdapter.id = 'HlsAdapter';\nHlsAdapter._logger = _playkitJs.BaseMediaSourceAdapter.getLogger(HlsAdapter.id);\nHlsAdapter._hlsMimeTypes = ['application/x-mpegurl', 'application/vnd.apple.mpegurl', 'audio/mpegurl', 'audio/x-mpegurl', 'video/x-mpegurl', 'video/mpegurl', 'application/mpegurl'];\nexports.default = HlsAdapter;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\n\t\"recoverDecodingErrorDelay\": 3000,\n\t\"recoverSwapAudioCodecDelay\": 3000,\n\t\"hlsConfig\": {\n\t\t\"fragLoadingMaxRetry\": 4,\n\t\t\"maxMaxBufferLength\": 60\n\t}\n};\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HlsJsErrorMap = undefined;\n\nvar _HlsJsErrorMap;\n\nvar _hls = __webpack_require__(1);\n\nvar _hls2 = _interopRequireDefault(_hls);\n\nvar _playkitJs = __webpack_require__(0);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar HlsJsErrorMap = (_HlsJsErrorMap = {}, _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.MANIFEST_LOAD_ERROR, {\n  category: _playkitJs.Error.Category.MANIFEST,\n  code: _playkitJs.Error.Code.HTTP_ERROR\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.MANIFEST_LOAD_TIMEOUT, {\n  category: _playkitJs.Error.Category.MANIFEST,\n  code: _playkitJs.Error.Code.TIMEOUT\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.MANIFEST_PARSING_ERROR, {\n  category: _playkitJs.Error.Category.MANIFEST,\n  code: _playkitJs.Error.Code.HLSJS_CANNOT_PARSE\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.LEVEL_LOAD_ERROR, {\n  category: _playkitJs.Error.Category.NETWORK,\n  code: _playkitJs.Error.Code.HTTP_ERROR\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.LEVEL_LOAD_TIMEOUT, {\n  category: _playkitJs.Error.Category.NETWORK,\n  code: _playkitJs.Error.Code.TIMEOUT\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.LEVEL_SWITCH_ERROR, {\n  category: _playkitJs.Error.Category.PLAYER,\n  code: _playkitJs.Error.Code.BITRATE_SWITCH_ISSUE\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.FRAG_LOAD_ERROR, {\n  category: _playkitJs.Error.Category.NETWORK,\n  code: _playkitJs.Error.Code.HTTP_ERROR\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.FRAG_LOOP_LOADING_ERROR, {\n  category: _playkitJs.Error.Category.NETWORK,\n  code: _playkitJs.Error.Code.HTTP_ERROR\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.FRAG_LOAD_TIMEOUT, {\n  category: _playkitJs.Error.Category.NETWORK,\n  code: _playkitJs.Error.Code.TIMEOUT\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.FRAG_PARSING_ERROR, {\n  category: _playkitJs.Error.Category.MEDIA,\n  code: _playkitJs.Error.Code.HLS_FRAG_PARSING_ERROR\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.BUFFER_APPEND_ERROR, {\n  category: _playkitJs.Error.Category.MEDIA,\n  code: _playkitJs.Error.Code.HLS_BUFFER_APPEND_ISSUE\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.BUFFER_APPENDING_ERROR, {\n  category: _playkitJs.Error.Category.MEDIA,\n  code: _playkitJs.Error.Code.HLS_BUFFER_APPENDING_ISSUE\n}), _defineProperty(_HlsJsErrorMap, _hls2.default.ErrorDetails.BUFFER_STALLED_ERROR, {\n  category: _playkitJs.Error.Category.MEDIA,\n  code: _playkitJs.Error.Code.HLS_BUFFER_STALLED_ERROR\n}), _HlsJsErrorMap);\n\nexports.HlsJsErrorMap = HlsJsErrorMap;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _playkitJs = __webpack_require__(0);\n\nvar _hls = __webpack_require__(1);\n\nvar _hls2 = _interopRequireDefault(_hls);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * A plugin override for the loader function in hls.js.\n * It checks if it should use jsonp for the manifest first, else - the regular\n * loader is called.\n */\nvar pLoader = function (_Hlsjs$DefaultConfig$) {\n  _inherits(pLoader, _Hlsjs$DefaultConfig$);\n\n  /**\n   * @constructor\n   * @param {Object} config - hlsjs config object. it also contains the jsonp callback function\n   */\n  function pLoader(config) {\n    _classCallCheck(this, pLoader);\n\n    var _this = _possibleConstructorReturn(this, (pLoader.__proto__ || Object.getPrototypeOf(pLoader)).call(this, config));\n\n    var loadOrig = _this.load.bind(_this);\n    var callback = pLoader.redirectExternalStreamsHandler;\n    _this.load = function (context, config, callbacks) {\n      var url = context.url;\n      if (context.type === 'manifest') {\n        _playkitJs.Utils.Http.jsonp(url, callback, {\n          timeout: pLoader.redirectExternalStreamsTimeout\n        }).then(function (uri) {\n          context.url = uri;\n          loadOrig(context, config, callbacks);\n        }).catch(function () {\n          return loadOrig(context, config, callbacks);\n        });\n      } else {\n        loadOrig(context, config, callbacks);\n      }\n    };\n    return _this;\n  }\n  /**\n   * redirect external stream handler function\n   * @param {string} uri - the original uri\n   * @returns {string} uri - the redirected URI\n   * @static\n   */\n\n\n  return pLoader;\n}(_hls2.default.DefaultConfig.loader);\n\npLoader.redirectExternalStreamsHandler = function (uri) {\n  return uri;\n};\n\nexports.default = pLoader;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// playkit-hls.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 1466dae4a543795ee808","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"playkit-js\",\"commonjs2\":\"playkit-js\",\"amd\":\"playkit-js\",\"root\":[\"playkit\",\"core\"]}\n// module id = 0\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external {\"commonjs\":\"hls.js\",\"commonjs2\":\"hls.js\",\"amd\":\"hls.js\",\"root\":\"Hls\"}\n// module id = 1\n// module chunks = 0","// @flow\nimport {registerMediaSourceAdapter} from 'playkit-js'\nimport HlsAdapter from './hls-adapter'\n\ndeclare var __VERSION__: string;\ndeclare var __NAME__: string;\n\nexport default HlsAdapter;\nexport {__VERSION__ as VERSION, __NAME__ as NAME};\n\n// Register hls adapter to the media source adapter provider.\nif (HlsAdapter.isSupported()) {\n  registerMediaSourceAdapter(HlsAdapter);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./index.js","//@flow\nimport Hlsjs from 'hls.js'\nimport DefaultConfig from './default-config'\nimport {type ErrorDetailsType, HlsJsErrorMap} from \"./errors\"\nimport {\n  AudioTrack,\n  BaseMediaSourceAdapter,\n  Env,\n  Error,\n  EventType,\n  TextTrack,\n  Track,\n  Utils,\n  VideoTrack\n} from 'playkit-js'\nimport pLoader from './jsonp-ploader'\n\n/**\n * Adapter of hls.js lib for hls content.\n * @classdesc\n */\nexport default class HlsAdapter extends BaseMediaSourceAdapter {\n  /**\n   * The id of the adapter.\n   * @member {string} id\n   * @static\n   * @private\n   */\n  static id: string = 'HlsAdapter';\n  /**\n   * The adapter logger.\n   * @member {any} _logger\n   * @static\n   * @private\n   */\n  static _logger = BaseMediaSourceAdapter.getLogger(HlsAdapter.id);\n  /**\n   * The supported mime types by the hls adapter.\n   * @member {Array<string>} _hlsMimeType\n   * @static\n   * @private\n   */\n  static _hlsMimeTypes: Array<string> = [\n    'application/x-mpegurl',\n    'application/vnd.apple.mpegurl',\n    'audio/mpegurl',\n    'audio/x-mpegurl',\n    'video/x-mpegurl',\n    'video/mpegurl',\n    'application/mpegurl'\n  ];\n  /**\n   * The hls player instance.\n   * @member {any} _hls\n   * @private\n   */\n  _hls: any;\n\n  /**\n   * last recover date from decoding error\n   * @type {number}\n   * @private\n   */\n  _recoverDecodingErrorDate: number;\n\n  /**\n   * last recover date from audio swap codec operation\n   * @type {number}\n   * @private\n   */\n  _recoverSwapAudioCodecDate: number;\n\n  /**\n   * indicate if external redirect was performed\n   * @type {boolean}\n   * @private\n   */\n  _triedReloadWithRedirect: boolean = false;\n\n  /**\n   * The load promise\n   * @member {Promise<Object>} - _loadPromise\n   * @type {Promise<Object>}\n   * @private\n   */\n  _loadPromise: ?Promise<Object>;\n\n  /**\n   * Reference to the player tracks.\n   * @member {Array<Track>} - _playerTracks\n   * @type {Array<Track>}\n   * @private\n   */\n  _playerTracks: Array<Track>;\n\n  /**\n   * stream start time in seconds\n   * @type {?number}\n   * @private\n   */\n  _startTime: ?number = 0;\n\n  /**\n   * Reference to _onLoadedMetadata function\n   * @member {?Function} - _onLoadedMetadataCallback\n   * @type {?Function}\n   * @private\n   */\n  _onLoadedMetadataCallback: ?Function;\n\n  /**\n   * Factory method to create media source adapter.\n   * @function createAdapter\n   * @param {HTMLVideoElement} videoElement - The video element that the media source adapter work with.\n   * @param {PKMediaSourceObject} source - The source Object.\n   * @param {Object} config - The player configuration.\n   * @returns {IMediaSourceAdapter} - New instance of the run time media source adapter.\n   * @static\n   */\n  static createAdapter(videoElement: HTMLVideoElement, source: PKMediaSourceObject, config: Object): IMediaSourceAdapter {\n    let adapterConfig = {};\n    if (Utils.Object.hasPropertyPath(config, 'playback.options.html5.hls')) {\n      adapterConfig.hlsConfig = config.playback.options.html5.hls;\n    }\n    if (Utils.Object.hasPropertyPath(config, 'sources.options')) {\n      const options = config.sources.options;\n      adapterConfig.forceRedirectExternalStreams = options.forceRedirectExternalStreams;\n      adapterConfig.redirectExternalStreamsHandler = options.redirectExternalStreamsHandler;\n      adapterConfig.redirectExternalStreamsTimeout = options.redirectExternalStreamsTimeout;\n      pLoader.redirectExternalStreamsHandler = adapterConfig.redirectExternalStreamsHandler;\n      pLoader.redirectExternalStreamsTimeout = adapterConfig.redirectExternalStreamsTimeout;\n    }\n    return new this(videoElement, source, adapterConfig);\n  }\n\n  /**\n   * Checks if hls adapter can play a given mime type.\n   * @function canPlayType\n   * @param {string} mimeType - The mime type to check.\n   * @returns {boolean} - Whether the hls adapter can play a specific mime type.\n   * @static\n   */\n  static canPlayType(mimeType: string): boolean {\n    let canHlsPlayType = (typeof mimeType === 'string') ? HlsAdapter._hlsMimeTypes.includes(mimeType.toLowerCase()) : false;\n    HlsAdapter._logger.debug('canPlayType result for mimeType:' + mimeType + ' is ' + canHlsPlayType.toString());\n    return canHlsPlayType;\n  }\n\n  /**\n   * Checks if hls adapter can play a given drm data.\n   * For hls.js it always returns false.\n   * @returns {boolean} - Whether the hls adapter can play a specific drm data.\n   * @static\n   */\n  static canPlayDrm(): boolean {\n    HlsAdapter._logger.warn('canPlayDrm result is false');\n    return false;\n  }\n\n  /**\n   * Checks if the hls adapter is supported.\n   * @function isSupported\n   * @returns {boolean} - Whether hls is supported.\n   * @static\n   */\n  static isSupported(): boolean {\n    let isHlsSupported = Hlsjs.isSupported();\n    HlsAdapter._logger.debug('isSupported:' + isHlsSupported);\n    return isHlsSupported;\n  }\n\n  /**\n   * @constructor\n   * @param {HTMLVideoElement} videoElement - The video element which will bind to the hls adapter\n   * @param {PKMediaSourceObject} source - The source object\n   * @param {Object} config - The media source adapter configuration\n   */\n  constructor(videoElement: HTMLVideoElement, source: PKMediaSourceObject, config: Object) {\n    HlsAdapter._logger.debug('Creating adapter. Hls version: ' + Hlsjs.version);\n    super(videoElement, source, config);\n    this._config = Utils.Object.mergeDeep({}, this._config, DefaultConfig);\n    if (this._config.forceRedirectExternalStreams) {\n      this._config.hlsConfig['pLoader'] = pLoader;\n    }\n    this._hls = new Hlsjs(this._config.hlsConfig);\n    this._addBindings();\n  }\n\n  /**\n   * Adds the required bindings with hls.js.\n   * @function _addBindings\n   * @private\n   * @returns {void}\n   */\n  _addBindings(): void {\n    this._hls.on(Hlsjs.Events.ERROR, (e, data) => this._onError(data));\n    this._hls.on(Hlsjs.Events.MANIFEST_LOADED, this._onManifestLoaded.bind(this));\n    this._hls.on(Hlsjs.Events.LEVEL_SWITCHED, this._onLevelSwitched.bind(this));\n    this._hls.on(Hlsjs.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched.bind(this));\n  }\n\n  /**\n   * Load the video source\n   * @function load\n   * @param {number} startTime - Optional time to start the video from.\n   * @returns {Promise<Object>} - The loaded data\n   * @override\n   */\n  load(startTime: ?number): Promise<Object> {\n    if (!this._loadPromise) {\n      this._startTime = startTime;\n      this._loadPromise = new Promise((resolve) => {\n        this._resolveLoad = resolve;\n        this._loadInternal();\n      });\n    }\n    return this._loadPromise;\n  }\n\n  /**\n   * Load the video source\n   * @function load\n   * @returns {void}\n   * @private\n   */\n  _loadInternal() {\n    this._onLoadedMetadataCallback = this._onLoadedMetadata.bind(this);\n    this._videoElement.addEventListener(EventType.LOADED_METADATA, this._onLoadedMetadataCallback);\n    if (this._startTime) {\n      this._hls.startPosition = this._startTime;\n    }\n    if (this._sourceObj && this._sourceObj.url) {\n      this._hls.loadSource(this._sourceObj.url);\n      this._hls.attachMedia(this._videoElement);\n      this._trigger(EventType.ABR_MODE_CHANGED, {mode: this.isAdaptiveBitrateEnabled() ? 'auto' : 'manual'});\n    }\n  }\n\n  /**\n   * Load the video source with installed playlist loader\n   * @function _reloadWithDirectManifest\n   * @returns {void}\n   * @private\n   */\n  _reloadWithDirectManifest() {\n    // Mark that we tried once to redirect\n    this._triedReloadWithRedirect = true;\n    // reset hls.js\n    this._reset();\n    // re-init hls.js with the external redirect playlist loader\n    this._config.hlsConfig['pLoader'] = pLoader;\n    this._hls = new Hlsjs(this._config.hlsConfig);\n    this._addBindings();\n    this._loadInternal();\n  }\n\n  /**\n   * Loaded metadata event handler.\n   * @private\n   * @returns {void}\n   */\n  _onLoadedMetadata(): void {\n    this._removeLoadedMetadataListener();\n    this._resolveLoad({tracks: this._playerTracks});\n  }\n\n  /**\n   * Remove the loadedmetadata listener\n   * @private\n   * @returns {void}\n   */\n  _removeLoadedMetadataListener(): void {\n    if (this._onLoadedMetadataCallback) {\n      this._videoElement.removeEventListener(EventType.LOADED_METADATA, this._onLoadedMetadataCallback);\n      this._onLoadedMetadataCallback = null;\n    }\n  }\n\n  /**\n   * Destroys the hls adapter.\n   * @function destroy\n   * @override\n   * @returns {Promise<*>} - The destroy promise.\n   */\n  destroy(): Promise<*> {\n    return super.destroy().then(() => {\n      HlsAdapter._logger.debug('destroy');\n      this._loadPromise = null;\n      this._playerTracks = [];\n      this._reset();\n    });\n  }\n\n  /**\n   * reset hls.js instance and its bindings\n   * @private\n   * @returns {void}\n   */\n  _reset(): void {\n    this._removeBindings();\n    this._hls.detachMedia();\n    this._hls.destroy();\n  }\n\n  /**\n   * Parse the hls tracks into player tracks.\n   * @returns {Array<Track>} - The parsed tracks.\n   * @private\n   */\n  _parseTracks(): Array<Track> {\n    const audioTracks = this._parseAudioTracks(this._hls.audioTracks || []);\n    const videoTracks = this._parseVideoTracks(this._hls.levels || []);\n    const textTracks = this._parseTextTracks(this._hls.subtitleTracks || []);\n    return audioTracks.concat(videoTracks).concat(textTracks);\n  }\n\n  /**\n   * Parse hls audio tracks into player audio tracks.\n   * @param {Array<Object>} hlsAudioTracks - The hls audio tracks.\n   * @returns {Array<AudioTrack>} - The parsed audio tracks.\n   * @private\n   */\n  _parseAudioTracks(hlsAudioTracks: Array<Object>): Array<AudioTrack> {\n    let audioTracks = [];\n    for (let i = 0; i < hlsAudioTracks.length; i++) {\n      // Create audio tracks\n      let settings = {\n        id: hlsAudioTracks[i].id,\n        active: this._hls.audioTrack === hlsAudioTracks[i].id,\n        label: hlsAudioTracks[i].name,\n        language: hlsAudioTracks[i].lang,\n        index: i\n      };\n      audioTracks.push(new AudioTrack(settings));\n    }\n    return audioTracks;\n  }\n\n  /**\n   * Parse hls video tracks into player video tracks.\n   * @param {Array<Object>} hlsVideoTracks - The hls video tracks.\n   * @returns {Array<VideoTrack>} - The parsed video tracks.\n   * @private\n   */\n  _parseVideoTracks(hlsVideoTracks: Array<Object>): Array<VideoTrack> {\n    let videoTracks = [];\n    for (let i = 0; i < hlsVideoTracks.length; i++) {\n      // Create video tracks\n      let settings = {\n        active: this._hls.startLevel === i,\n        bandwidth: hlsVideoTracks[i].bitrate,\n        width: hlsVideoTracks[i].width,\n        height: hlsVideoTracks[i].height,\n        language: '',\n        index: i\n      };\n      videoTracks.push(new VideoTrack(settings));\n    }\n    return videoTracks;\n  }\n\n  /**\n   * Parse hls text tracks into player text tracks.\n   * @param {Array<Object>} hlsTextTracks - The hls text tracks.\n   * @returns {Array<TextTrack>} - The parsed text tracks.\n   * @private\n   */\n  _parseTextTracks(hlsTextTracks: Array<Object>): Array<TextTrack> {\n    let textTracks = [];\n    for (let i = 0; i < hlsTextTracks.length; i++) {\n      // Create text tracks\n      let settings = {\n        id: hlsTextTracks[i].id,\n        active: hlsTextTracks[i].default,\n        label: hlsTextTracks[i].name,\n        kind: hlsTextTracks[i].type.toLowerCase(),\n        language: hlsTextTracks[i].lang,\n        index: i\n      };\n      textTracks.push(new TextTrack(settings));\n    }\n    return textTracks;\n  }\n\n  /**\n   * Select an audio track.\n   * @function selectAudioTrack\n   * @param {AudioTrack} audioTrack - the audio track to select.\n   * @returns {void}\n   * @public\n   */\n  selectAudioTrack(audioTrack: AudioTrack): void {\n    if (audioTrack instanceof AudioTrack && !audioTrack.active && this._hls.audioTracks) {\n      this._hls.audioTrack = audioTrack.id;\n    }\n  }\n\n  /**\n   * Select a video track.\n   * @function selectVideoTrack\n   * @param {VideoTrack} videoTrack - the track to select.\n   * @returns {void}\n   * @public\n   */\n  selectVideoTrack(videoTrack: VideoTrack): void {\n    if (videoTrack instanceof VideoTrack && (!videoTrack.active || this.isAdaptiveBitrateEnabled()) && this._hls.levels) {\n      if (this.isAdaptiveBitrateEnabled()) {\n        this._trigger(EventType.ABR_MODE_CHANGED, {mode: 'manual'});\n      }\n      this._hls.currentLevel = videoTrack.index;\n    }\n  }\n\n  /**\n   * Select a text track.\n   * @function selectTextTrack\n   * @param {TextTrack} textTrack - the track to select.\n   * @returns {void}\n   * @public\n   */\n  selectTextTrack(textTrack: TextTrack): void {\n    if (textTrack instanceof TextTrack && !textTrack.active && this._videoElement.textTracks) {\n      this._disableAllTextTracks();\n      this._videoElement.textTracks[textTrack.index].mode = 'hidden';\n      HlsAdapter._logger.debug('Text track changed', textTrack);\n      this._onTrackChanged(textTrack);\n    }\n  }\n\n  /** Hide the text track\n   * @function hideTextTrack\n   * @returns {void}\n   * @public\n   */\n  hideTextTrack(): void {\n    this._disableAllTextTracks();\n  }\n\n  /**\n   * Enables adaptive bitrate switching according to hls.js logic.\n   * @function enableAdaptiveBitrate\n   * @returns {void}\n   * @public\n   */\n  enableAdaptiveBitrate(): void {\n    if (!this.isAdaptiveBitrateEnabled()) {\n      this._trigger(EventType.ABR_MODE_CHANGED, {mode: 'auto'});\n      this._hls.nextLevel = -1;\n    }\n  }\n\n  /**\n   * Checking if adaptive bitrate switching is enabled.\n   * @function isAdaptiveBitrateEnabled\n   * @returns {boolean} - Whether adaptive bitrate is enabled.\n   * @public\n   */\n  isAdaptiveBitrateEnabled(): boolean {\n    return this._hls.autoLevelEnabled;\n  }\n\n  /**\n   * Returns the details of hls level\n   * @function _getLevelDetails\n   * @returns {Object} - Level details\n   * @private\n   */\n  _getLevelDetails(): Object {\n    const level = this._hls.levels[this._hls.currentLevel] || this._hls.levels[this._hls.nextLevel] || this._hls.levels[this._hls.nextAutoLevel] || this._hls.levels[this._hls.nextLoadLevel];\n    return level && level.details ? level.details : {};\n  }\n\n  /**\n   * Returns the live edge\n   * @returns {number} - live edge\n   * @private\n   */\n  _getLiveEdge(): number {\n    try {\n      let liveEdge;\n      if (this._hls.liveSyncPosition) {\n        liveEdge = this._hls.liveSyncPosition;\n      } else if (this._hls.config.liveSyncDuration) {\n        liveEdge = this._videoElement.duration - this._hls.config.liveSyncDuration;\n      } else {\n        liveEdge = this._videoElement.duration - this._hls.config.liveSyncDurationCount * this._getLevelDetails().targetduration;\n      }\n      return liveEdge > 0 ? liveEdge : this._videoElement.duration;\n    } catch (e) {\n      HlsAdapter._logger.debug('Live edge calculation failed, fall back to duration');\n      return this._videoElement.duration;\n    }\n  }\n\n  /**\n   * Seeking to live edge, calculated according hls configuration - liveSyncDuration or liveSyncDurationCount.\n   * @function seekToLiveEdge\n   * @returns {void}\n   * @public\n   */\n  seekToLiveEdge(): void {\n    try {\n      this._videoElement.currentTime = this._getLiveEdge();\n    } catch (e) {\n      return;\n    }\n  }\n\n  /**\n   * Checking if the current playback is live.\n   * @function isLive\n   * @returns {boolean} - Whether playback is live.\n   * @public\n   */\n  isLive(): boolean {\n    try {\n      return !!(this._getLevelDetails().live);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Fired after manifest has been loaded.\n   * @function _onManifestLoaded\n   * @private\n   * @returns {void}\n   */\n  _onManifestLoaded(): void {\n    HlsAdapter._logger.debug('The source has been loaded successfully');\n    this._hls.startLoad();\n    this._playerTracks = this._parseTracks();\n  }\n\n  /**\n   * Triggers on video track selection (auto or manually) the 'videotrackchanged' event forward.\n   * @function _onLevelSwitched\n   * @param {string} event - The event name.\n   * @param {any} data - The event data object.\n   * @private\n   * @returns {void}\n   */\n  _onLevelSwitched(event: string, data: any): void {\n    let videoTrack = this._playerTracks.find((track) => {\n      return (track instanceof VideoTrack && track.index === data.level);\n    });\n    HlsAdapter._logger.debug('Video track changed', videoTrack);\n    this._onTrackChanged(videoTrack);\n  }\n\n  /**\n   * Triggers on audio track selection (auto or manually) the 'audiotrackchanged' event forward.\n   * @function _onAudioTrackSwitched\n   * @param {string} event - The event name.\n   * @param {any} data - The event data object.\n   * @private\n   * @returns {void}\n   */\n  _onAudioTrackSwitched(event: string, data: any): void {\n    let audioTrack = this._playerTracks.find((track) => {\n      return (track instanceof AudioTrack && track.id === data.id);\n    });\n    HlsAdapter._logger.debug('Audio track changed', audioTrack);\n    this._onTrackChanged(audioTrack);\n    this._handleWaitingUponAudioTrackSwitch();\n  }\n\n  /**\n   * Trigger a playing event whenever an audio track is changed & time_update event is fired.\n   * This align Edge and IE behaviour to other browsers. When an audio track changed in IE & Edge, they trigger\n   * waiting event but not playing event.\n   * @returns {void}\n   * @private\n   */\n  _handleWaitingUponAudioTrackSwitch(): void {\n    const affectedBrowsers = ['IE', 'Edge'];\n    if (affectedBrowsers.includes(Env.browser.name)) {\n      const timeUpdateListener = () => {\n        this._trigger(EventType.PLAYING);\n        this._videoElement.removeEventListener(EventType.TIME_UPDATE, timeUpdateListener);\n      };\n      this._videoElement.addEventListener(EventType.TIME_UPDATE, timeUpdateListener)\n    }\n  }\n\n  /**\n   * Disables all the video tag text tracks.\n   * @returns {void}\n   * @private\n   */\n  _disableAllTextTracks() {\n    let vidTextTracks = this._videoElement.textTracks;\n    for (let i = 0; i < vidTextTracks.length; i++) {\n      vidTextTracks[i].mode = 'disabled';\n    }\n  }\n\n  /**\n   * Handles hls errors.\n   * @param {any} data - The event data object.\n   * @private\n   * @returns {void}\n   */\n  _onError(data: any): void {\n    const errorType = data.type;\n    const errorDetails = data.details;\n    const errorFatal = data.fatal;\n    if (errorFatal) {\n      let error: typeof Error;\n      switch (errorType) {\n        case Hlsjs.ErrorTypes.NETWORK_ERROR:\n          if ([Hlsjs.ErrorDetails.MANIFEST_LOAD_ERROR, Hlsjs.ErrorDetails.MANIFEST_LOAD_TIMEOUT].includes(errorDetails) &&\n            !this._triedReloadWithRedirect && !this._config.forceRedirectExternalStreams) {\n            this._reloadWithDirectManifest();\n          } else {\n            error = new Error(\n              Error.Severity.CRITICAL,\n              Error.Category.NETWORK,\n              Error.Code.HTTP_ERROR,\n              errorDetails);\n          }\n          break;\n        case Hlsjs.ErrorTypes.MEDIA_ERROR:\n          if (this._handleMediaError()) {\n            error = new Error(\n              Error.Severity.RECOVERABLE,\n              Error.Category.MEDIA,\n              Error.Code.HLS_FATAL_MEDIA_ERROR,\n              errorDetails);\n          } else {\n            error = new Error(\n              Error.Severity.CRITICAL,\n              Error.Category.MEDIA,\n              Error.Code.HLS_FATAL_MEDIA_ERROR,\n              errorDetails);\n          }\n          break;\n        default:\n          error = new Error(\n            Error.Severity.CRITICAL,\n            Error.Category.PLAYER,\n            Error.Code.HLS_FATAL_MEDIA_ERROR,\n            errorDetails);\n          break;\n      }\n      this._trigger(EventType.ERROR, error);\n      if (error && error.severity === Error.Severity.CRITICAL) {\n        this.destroy();\n      }\n    } else {\n      const {category, code}: ErrorDetailsType = HlsJsErrorMap[errorDetails] || {category: 0, code: 0};\n      HlsAdapter._logger.warn(new Error(\n        Error.Severity.RECOVERABLE,\n        category,\n        code,\n        errorDetails));\n    }\n  }\n\n  /**\n   * Tries to handle media errors via hls.js error handlers\n   * @returns {boolean} - if media error is handled or not\n   * @private\n   */\n  _handleMediaError(): boolean {\n    const now: number = performance.now();\n    let recover = true;\n    if (this._checkTimeDeltaHasPassed(now, this._recoverDecodingErrorDate, this._config.recoverDecodingErrorDelay)) {\n      this._recoverDecodingError();\n    } else {\n      if (this._checkTimeDeltaHasPassed(now, this._recoverSwapAudioCodecDate, this._config.recoverSwapAudioCodecDelay)) {\n        this._recoverSwapAudioCodec();\n      } else {\n        recover = false;\n        HlsAdapter._logger.error(\"cannot recover, last media error recovery failed\");\n      }\n    }\n    return recover;\n  }\n\n  /**\n   * Check if time ahs passed a certain delta\n   * @param {number} now - current time\n   * @param {number} then - previous time\n   * @param {number} delay - time delta in ms\n   * @returns {boolean} - if time delta has\n   * @private\n   */\n  _checkTimeDeltaHasPassed(now: number, then: number, delay: number): boolean {\n    return (!then || (now - then) > delay);\n  }\n\n  /**\n   * handle recover from decoding error\n   * @returns {void}\n   * @private\n   */\n  _recoverDecodingError(): void {\n    this._recoverDecodingErrorDate = performance.now();\n    HlsAdapter._logger.warn(\"try to recover media Error\");\n    this._hls.recoverMediaError();\n  }\n\n  /**\n   * handle recover from decoding error by swaping audio codec\n   * @returns {void}\n   * @private\n   */\n  _recoverSwapAudioCodec(): void {\n    this._recoverSwapAudioCodecDate = performance.now();\n    HlsAdapter._logger.warn(\"try to swap Audio Codec and recover media Error\");\n    this._hls.swapAudioCodec();\n    this._hls.recoverMediaError();\n  }\n\n  /**\n   * Removes hls.js bindings.\n   * @returns {void}\n   * @private\n   */\n  _removeBindings(): void {\n    this._hls.off(Hlsjs.Events.ERROR, this._onError);\n    this._hls.off(Hlsjs.Events.LEVEL_SWITCHED, this._onLevelSwitched);\n    this._hls.off(Hlsjs.Events.AUDIO_TRACK_SWITCHED, this._onAudioTrackSwitched);\n    this._removeLoadedMetadataListener();\n  }\n\n  /**\n   * Get the start time of DVR window in live playback in seconds.\n   * @returns {Number} - start time of DVR window.\n   * @public\n   */\n  getStartTimeOfDvrWindow(): number {\n    if (this.isLive()) {\n      try {\n        const nextLoadLevel = this._hls.levels[this._hls.nextLoadLevel],\n          details = nextLoadLevel.details,\n          fragments = details.fragments,\n          fragLength = fragments.length,\n          start = fragments[0].start + fragments[0].duration,\n          end = fragments[fragLength - 1].start + fragments[fragLength - 1].duration,\n          maxLatency = this._hls.config.liveMaxLatencyDuration !== undefined ? this._hls.config.liveMaxLatencyDuration : this._hls.config.liveMaxLatencyDurationCount * details.targetduration,\n          minPosToSeek = Math.max(start - this._hls.config.maxFragLookUpTolerance, end - maxLatency);\n        return minPosToSeek;\n      }\n      catch (e) {\n        HlsAdapter._logger.debug('Unable obtain the start of DVR window');\n        return 0;\n      }\n    } else {\n      return 0;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./hls-adapter.js","module.exports = {\n\t\"recoverDecodingErrorDelay\": 3000,\n\t\"recoverSwapAudioCodecDelay\": 3000,\n\t\"hlsConfig\": {\n\t\t\"fragLoadingMaxRetry\": 4,\n\t\t\"maxMaxBufferLength\": 60\n\t}\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./default-config.json\n// module id = 4\n// module chunks = 0","// @flow\nimport Hlsjs from 'hls.js'\nimport {Error} from 'playkit-js'\n\ntype ErrorDetailsType = {category: number, code: number};\ntype HlsJsErrorMapType = {[name: string]: ErrorDetailsType};\n\nconst HlsJsErrorMap: HlsJsErrorMapType = {\n  [Hlsjs.ErrorDetails.MANIFEST_LOAD_ERROR]: {\n    category: Error.Category.MANIFEST,\n    code: Error.Code.HTTP_ERROR\n  },\n  [Hlsjs.ErrorDetails.MANIFEST_LOAD_TIMEOUT]: {\n    category: Error.Category.MANIFEST,\n    code: Error.Code.TIMEOUT\n  },\n  [Hlsjs.ErrorDetails.MANIFEST_PARSING_ERROR]: {\n    category: Error.Category.MANIFEST,\n    code: Error.Code.HLSJS_CANNOT_PARSE\n  },\n  [Hlsjs.ErrorDetails.LEVEL_LOAD_ERROR]: {\n    category: Error.Category.NETWORK,\n    code: Error.Code.HTTP_ERROR\n  },\n  [Hlsjs.ErrorDetails.LEVEL_LOAD_TIMEOUT]: {\n    category: Error.Category.NETWORK,\n    code: Error.Code.TIMEOUT\n  },\n  [Hlsjs.ErrorDetails.LEVEL_SWITCH_ERROR]: {\n    category: Error.Category.PLAYER,\n    code: Error.Code.BITRATE_SWITCH_ISSUE\n  },\n  [Hlsjs.ErrorDetails.FRAG_LOAD_ERROR]: {\n    category: Error.Category.NETWORK,\n    code: Error.Code.HTTP_ERROR\n  },\n  [Hlsjs.ErrorDetails.FRAG_LOOP_LOADING_ERROR]: {\n    category: Error.Category.NETWORK,\n    code: Error.Code.HTTP_ERROR\n  },\n  [Hlsjs.ErrorDetails.FRAG_LOAD_TIMEOUT]: {\n    category: Error.Category.NETWORK,\n    code: Error.Code.TIMEOUT\n  },\n  [Hlsjs.ErrorDetails.FRAG_PARSING_ERROR]: {\n    category: Error.Category.MEDIA,\n    code: Error.Code.HLS_FRAG_PARSING_ERROR\n  },\n  [Hlsjs.ErrorDetails.BUFFER_APPEND_ERROR]: {\n    category: Error.Category.MEDIA,\n    code: Error.Code.HLS_BUFFER_APPEND_ISSUE\n  },\n  [Hlsjs.ErrorDetails.BUFFER_APPENDING_ERROR]: {\n    category: Error.Category.MEDIA,\n    code: Error.Code.HLS_BUFFER_APPENDING_ISSUE\n  },\n  [Hlsjs.ErrorDetails.BUFFER_STALLED_ERROR]: {\n    category: Error.Category.MEDIA,\n    code: Error.Code.HLS_BUFFER_STALLED_ERROR\n  }\n};\n\nexport {HlsJsErrorMap};\nexport type {ErrorDetailsType};\n\n\n\n// WEBPACK FOOTER //\n// ./errors.js","//@flow\nimport {Utils} from 'playkit-js'\nimport Hlsjs from 'hls.js'\n\n/**\n * A plugin override for the loader function in hls.js.\n * It checks if it should use jsonp for the manifest first, else - the regular\n * loader is called.\n */\nexport default class pLoader extends Hlsjs.DefaultConfig.loader {\n  /**\n   * redirect external stream handler function\n   * @param {string} uri - the original uri\n   * @returns {string} uri - the redirected URI\n   * @static\n   */\n  static redirectExternalStreamsHandler: Function = uri => uri;\n\n  /**\n   * @constructor\n   * @param {Object} config - hlsjs config object. it also contains the jsonp callback function\n   */\n  constructor(config: Object) {\n    super(config);\n    const loadOrig = this.load.bind(this);\n    const callback = pLoader.redirectExternalStreamsHandler;\n    this.load = (context, config, callbacks) => {\n      const url = context.url;\n      if (context.type === 'manifest') {\n        Utils.Http.jsonp(url, callback, {\n          timeout: pLoader.redirectExternalStreamsTimeout\n        }).then(uri => {\n          context.url = uri;\n          loadOrig(context, config, callbacks);\n        }).catch(() => loadOrig(context, config, callbacks));\n      } else {\n        loadOrig(context, config, callbacks);\n      }\n    };\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./jsonp-ploader.js"],"sourceRoot":""}